module vector_floating_point_merge_unit

import 	dragonfang_pkg::*,
		dragonfang_floating_point_pkg::*;
		
(
	input 	logic 				clock,
	input 	logic 				reset_n,
	input 	execution_vector_t 	execution_vector,
	
	input 	logic [63:0] 		v0,
	
	input 	logic [63:0] 		vs2,
	input 	logic [63:0] 		vs1,
	
	output 	logic [63:0] 		vd_low
);

	logic [63:0] 		v0_ff_0;
	logic [63:0] 		vs2_ff_0;
	logic [63:0] 		vs1_ff_0;
	
	execution_vector_t 	execution_vector_ff_0;
	
	logic [63:0] 		vd_low_bus;
	
	always_ff @ (posedge clock, negedge reset_n)
		if (!reset_n)
			begin
				v0_ff_0 				<= '0;
				
				vs2_ff_0 				<= '0;
				vs1_ff_0 				<= '0;
				
				execution_vector_ff_0 	<= '0;
				
				vd_low 					<= '0;
			end
	
		else
			begin
				v0_ff_0 				<= v0;
				
				vs2_ff_0 				<= vs2;
				vs1_ff_0 				<= vs1;
				
				execution_vector_ff_0 	<= execution_vector;
				
				vd_low 					<= vd_low_bus;
			end
		
	always_comb
		case (execution_vector_ff_0.bit_mode)
			ENABLED_64BIT_MODE 	:
				vd_low_bus = (v0_ff_0[0] ? vs1_ff_0 : vs2_ff_0);
			
			ENABLED_32BIT_MODE 	:
				begin
					vd_low_bus[31:0] 	= (v0_ff_0[0] ? vs1_ff_0[31:0] : vs2_ff_0[31:0]);
					vd_low_bus[63:32] 	= (v0_ff_0[1] ? vs1_ff_0[63:32] : vs2_ff_0[63:32]);
				end
			
			default				: vd_low_bus = '0;
		endcase
	
endmodule 