module vector_floating_point_divide_unit

import 	dragonfang_pkg::*,
		dragonfang_utils_pkg::*;

(
	input 	logic 				clock,
	input 	logic 				reset_n,
	input 	execution_vector_t 	execution_vector,
	
	input 	logic [63:0] 		vs2,
	input 	logic [63:0] 		vs1,
	
	output 	logic [63:0] 		vd_low
);

	execution_vector_t execution_vector_ff_0;
	logic [63:0] vs2_ff_0;
	logic [63:0] vs1_ff_0;
	
	logic [63:0] vd_low_bus;
	logic [63:0] vd_high_bus;
	
	// Manage inter-stage flip-flop's.
	always_ff @ (posedge clock, negedge reset_n)
		if (!reset_n)
			begin
				execution_vector_ff_0 	<= '0;
				vs2_ff_0 				<= '0;
				vs1_ff_0 				<= '0;
				
				vd_low					<= '0;
				vd_high					<= '0;
			end
			
		else
			begin
				execution_vector_ff_0 	<= execution_vector;
				vs2_ff_0 				<= vs2;
				vs1_ff_0 				<= vs1;
				
				vd_low					<= vd_low_bus;
				vd_high					<= vd_high_bus;
			end
	
	
	// Manage the supported cases.
	always_comb
		case (execution_vector_ff_0.bit_mode)
			ENABLED_64BIT_MODE 	:
				begin
					vd_low_bus 	= multiply_double(vs2_ff_0, vs1_ff_0);
					vd_high_bus	= '0;
				end
			
			ENABLED_32BIT_MODE 	:
				if (execution_vector_ff_0.widening_mode == ENABLED_WIDENING_MODE)
					begin
						vd_low_bus 	= float_to_double(multiply_float(vs2_ff_0[31:0], vs1_ff_0[31:0]));
						vd_high_bus = float_to_double(multiply_float(vs2_ff_0[63:32], vs1_ff_0[63:32]));
					end
					
				else
					begin
						vd_low_bus[31:0] 	= multiply_float(vs2_ff_0[31:0], vs1_ff_0[31:0]);
						vd_low_bus[63:32] 	= multiply_float(vs2_ff_0[63:32], vs1_ff_0[63:32]);
						vd_high_bus			= '0;
					end
			
			default				:
				begin
					vd_low_bus 	= '0;
					vd_high_bus = '0;
				end
				
		endcase
	
endmodule 